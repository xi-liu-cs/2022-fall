\documentclass[12pt, border = 4pt, multi]{article} % \documentclass[tikz, border = 4pt, multi]{article}
\usepackage[a4paper, margin = 70pt]{geometry}
\usepackage{lingmacros}
\usepackage{tree-dvips}
\usepackage{amssymb} % mathbb{}
\usepackage[dvipsnames]{xcolor}
\usepackage{forest}
\usepackage[pdftex]{hyperref}
\usepackage{amsmath} % matrices
\usepackage{xeCJK}
\usepackage{tikz}
\usepackage[arrowdel]{physics}
\usepackage{graphicx}
\usepackage{wrapfig}
\usepackage{listings}
\usepackage{pgfplots, pgfplotstable}
\usepackage{diagbox} % diagonal line in cell
\usepackage[usestackEOL]{stackengine}
\usepackage{makecell}
\usepackage{mathrsfs}
\usepackage{multirow}
\usepackage{multicol}
\usepackage[T1]{fontenc}
\allowdisplaybreaks[1]
\setlength{\columnsep}{1cm}
\graphicspath{{./img}} % specify the graphics path to be relative to the main .tex file, denoting the main .tex file directory as ./
\definecolor{orchid}{rgb}{0.7, 0.4, 1.1}
\lstset
{ 
  backgroundcolor = \color{white},
  basicstyle = \scriptsize,
  breaklines = true,
  commentstyle = \color{comment_color}\textit,
  keywordstyle = \color{keyword_color}\bfseries,
  language = c++,
  escapeinside = {\%*}{*)},          
  extendedchars = true,              
  frame = tb,
  numberstyle = \tiny\color{comment_color},
  rulecolor = \color{black},
  showstringspaces = false,
  stringstyle = \color{string_color},
  upquote = true, 
}
\usepackage{xcolor}
\definecolor{comment_color}{rgb}{0, 0.5, 0}
\definecolor{keyword_color}{rgb}{0.3, 0, 0.6}
\definecolor{string_color}{rgb}{0.5, 0, 0.1}
\begin{document}
\section*{Xi Liu}
homework 3\\
\\
1\\
a\\
\\
\\
\\
b\\
assume virtual page size is equal to physical page size\\
assume $bytes\_per\_element = sizeof(long\;int) = 8\\
page\_size / bytes\_per\_element = 512 / 8 = 64$
\begin{lstlisting}
int n = 64;
long int A[n][n];
int page_size = 512,
bytes_per_element = sizeof(**A); /* sizeof(long int) = 8 */
printf("bytes_per_element = %d\n", bytes_per_element);
printf("page_size / bytes_per_element = %d\n", page_size / bytes_per_element); /* 512 / 8 = 64 */
\end{lstlisting}
so each virtual page can hold \boxed{64} elements of array A\\
\\
\\
\\
c\\
assume virtual page size is equal to physical page size\\
assume $bytes\_per\_element = sizeof(long\;int) = 8\\
page\_size / bytes\_per\_element = 512 / 8 = 64$
\begin{lstlisting}
int n = 64;
long int A[n][n];
int page_size = 512,
bytes_per_element = sizeof(**A); /* sizeof(long int) = 8 */
printf("bytes_per_element = %d\n", bytes_per_element);
printf("page_size / bytes_per_element = %d\n", page_size / bytes_per_element); /* 512 / 8 = 64 */
\end{lstlisting}
so each physical page can hold \boxed{64} elements of array A\\
\\
\\
\\
d\\
$sizeof(A) = 64 * 64 * 8 = 32768$ bytes\\
number of pages of A: 32768 / 512 = 64 pages\\
$sizeof(physical\_memory) = 4 * 512 = 2048$ bytes\\
\\
piece A
\begin{lstlisting}
for(int j = 0; j < 64; j++)
    for(int i = 0; i < 64; i++)
        A[i][j] = 0;
\end{lstlisting}
piece A\\
the array A is accessed in the sequence of $A[0][0], A[1][0], A[2][0]$, ...\\
case 1: if assume the memory needed to run the operating system, the code of the operating system, and the code of the current process is stored somewhere else and not stored inside these 4 pages, so then assume the 4 pages can be used at the same time to store part of array A\\
physical memory can store 4 pages at once. array A need 64 pages in total, so if in an element access, the element is not currently stored in the 4 pages, page faults occur, since the sequence of access is $A[0][0], A[1][0], A[2][0]$, ..., each element access have an offset of 64 elements with the next element in the perspective of C contiguous row major array storage. each page can deal with $512 / 64 = 8$ element accesses at each batch of accesses. since physical memory can store 4 pages at once, and physical memory can store 4 pages at once, so $4 * 8 = 32$ accesses can be done without page fault
total number of array A accesses = 64 * 64 = 4096\\
\\
\\
\\
piece B
\begin{lstlisting}
for(int i = 0; i < 64; i++)
    for(int j = 0; j < 64; j++)
        A[i][j] = 0;
\end{lstlisting}
piece B\\
the array A is accessed in the sequence of $A[0][0], A[0][1], A[0][2]$, ...\\
\\
case 1: if assume the memory needed to run the operating system, the code of the operating system, and the code of the current process is stored somewhere else and not stored inside these 4 pages, so then assume the 4 pages can be used at the same time to store part of array A\\
physical memory can store 4 pages at once. array A need 64 pages in total, so after accessing the elements that are stored in the 4 pages, page faults occur, then a page is swapped to replace the current page, but then after accessing all elements in the new page, a page fault occur again. so page faults occur for 64 - 4 = \boxed{60} times\\
\\
case 2: if assume the memory needed to run the operating system, the code of the operating system, and the code of the current process require $n \in [0, 4] \cap \mathbb{N}$ pages, and the storage using for them is included in these 4 pages, so then 4 - $n$ pages can be used at the same time to store part of array A\\
the remaining physical memory to access array $A$ can store 4 - $n$ pages at once. array A need 64 pages in total, so after accessing the elements that are stored in the 4 - $n$ pages, page faults occur, then a page is swapped to replace the current page, but then after accessing all elements in the new page, a page fault occur again. so page faults occur for 64 - 4 - $n$ = \boxed{60 - n} times\\ 
\end{document}
