shortest remaining time next (shortest time to completion first)
if assume no new process come
3 processes are already in ready state
then the curently executing process already has lowest remaining time, its remaining can only decrease

pid can be reused
pid x does not necessarily come before x + 1

cannot know process time beforehand
1. os running in background, interrupts
2. dust in motherboard from openings 
processor become hot, fan turned on
3. other processes

t_{response} = t_{firstrun} - t_{arrival}
processes remove before time slice
1. interrupt
2. i/o
3. finish

if a process is removed before reaches a quantum, then the counter start to count from 0 again
round robin can have lower response time and higher turnaround time
in interactive system, focus on response time
in batch system, focus on turnaround time

multi level feedback queue
several queues
process prority may change overtime, assigned to different queue

rule 1: If Priority(A) > Priority(B), A runs (B doesnâ€™t)
rule 2: If Priority(A) = Priority(B), A & B run in round robin
rule 3: When a job enters the system, it is placed at the highest
priority (the topmost queue)
rule 4a: If a job uses up an entire time slice while running, its priority is reduced (i.e., it moves down one queue).
rule 4b: If a job gives up the CPU before the time slice is up, it stays
at the same priority level
Rule 5: After some time period S, move all the jobs in the system
to the topmost queue

if a job uses entire time slice while running, move to lower queue
cpu intensive, it eats all cpu time, small to no i/o, if stay at top, other processes starve

mlfq can lead to starvation of cpu intensive processes
gaming system, use 99% time slice, then unneeded i/o
changing between interactive and cpu intensive, when to move a process up
